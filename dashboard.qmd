---
title: "Better PyPI stats"
logo: logo.svg
format:
  dashboard:
    theme: darkly
    scrolling: true
server: shiny
---


```{python}
#| echo: false
#| output: false

import plotly.express as px
from shinywidgets import render_plotly  


import ibis

import plotly.express as px

from shiny import ui, render, reactive
from itables import show
from datetime import datetime, timedelta

# set plotly express to dark mode
px.defaults.template = "plotly_dark"

ibis.options.interactive = True

host = "clickpy-clickhouse.clickhouse.com"
port = 443
user = "play"
database = "pypi"

con = ibis.clickhouse.connect(
  host=host,
  port=port,
  user=user,
  database=database,
)

pypi = con.table("pypi")
projects = con.table("projects")

```


## Row

```{python}
#| content: valuebox
#| title: "Total packages"
#| icon: boxes
#| color: primary
dict(
  value = f"{projects.count().to_pandas():,}",
)
```

```{python}
#| content: valuebox
#| title: "Total authors"
#| icon: person
#| color: primary
dict(
  value = f"{projects.select('author').nunique().to_pandas():,}",
)
```

```{python}
#| content: valuebox
#| title: "Total rows"
#| icon: bookshelf
#| color: primary
dict(
  value = f"{pypi.count().to_pandas():,}",
)
```

## Row 

### {.toolbar}

```{python}
ui.input_text("package", "Package:", value="ibis-framework")
ui.input_slider("rng", "Range", min = 0, max=1000, value=30, step=30, ticks=True)

@reactive.Calc
def filtered_pypi():
  package = input.package()
  days = input.rng()
  today = datetime.today()
  n_days_ago = today - timedelta(days=days)
  end_date = today.strftime("%Y-%m-%d")
  start_date = n_days_ago.strftime("%Y-%m-%d")
  data = (
    pypi.filter(ibis._.project == package)
    .filter(ibis._.date >= ibis.date(start_date))
    .filter(ibis._.date <= ibis.date(end_date))
  )
  return data
```


## Plot 1 

```{python}
@render_plotly
def plot0():
  t = (
      filtered_pypi()
      .group_by(date=ibis._.date, color=ibis._.python_minor)
      .agg(count=ibis._.count())
      .order_by(ibis._.date.desc())
      .mutate(date=ibis._.date.cast("string"))
  )

  fig = px.bar(t, x="date", y='count', title=f"Daily downloads - Overall", color="color")
  fig.update_layout(title_x=0.5)
  return fig
```

## Plot 2

```{python}
@render_plotly
def line():
  t = (
      filtered_pypi()
      .group_by(date=ibis._.date, color=ibis._.installer)
      .agg(count=ibis._.count())
      .order_by(ibis._.date.desc())
      .mutate(date=ibis._.date.cast("string"))
  )

  fig = px.bar(t, x="date", y='count',title=f"Daily downloads - Installer", color="color")
  fig.update_layout(title_x=0.5)
  return fig
```

## Plot 3

```{python}
@render_plotly
def line2():
  t = (
      filtered_pypi()
      .group_by(date=ibis._.date, system=ibis._.system)
      .agg(count=ibis._.count())
      .order_by(ibis._.date.desc())
      .mutate(date=ibis._.date.cast("string"))
  )

  fig = px.bar(t, x="date", y='count',title=f"Daily downloads - System", color="system")
  fig.update_layout(title_x=0.5)
  return fig
```